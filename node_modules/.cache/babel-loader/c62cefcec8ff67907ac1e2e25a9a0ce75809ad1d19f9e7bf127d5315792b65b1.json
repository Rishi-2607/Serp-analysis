{"ast":null,"code":"var _jsxFileName = \"/Users/hp/Documents/GitHub/SERP/src/pages/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Box, Button, Card, CardContent, Grid, TextField, Typography, LinearProgress } from '@mui/material';\nimport { Document, Packer, Paragraph, TextRun, ImageRun, HeadingLevel, ExternalHyperlink } from 'docx';\nimport axios from 'axios';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [keywords, setKeywords] = useState('');\n  const [urls, setUrls] = useState(''); // Changed from string[] to string\n  const [locations, setLocations] = useState(''); // Changed from string[] to string\n  const [uploadedData, setUploadedData] = useState(null);\n  const [results, setResults] = useState([]);\n  const [apiKey, setApiKey] = useState(() => localStorage.getItem('serpApiKey') || '');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [urlScreenshots, setUrlScreenshots] = useState(new Map());\n  const handleScreenshotUpload = url => event => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = e => {\n        var _e$target;\n        const newScreenshots = new Map(urlScreenshots);\n        const today = new Date();\n        const formattedDate = `${today.getMonth() + 1}/${today.getDate()}/${today.getFullYear().toString().substr(-2)}`;\n        newScreenshots.set(url, {\n          file: (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.result,\n          date: formattedDate\n        });\n        setUrlScreenshots(newScreenshots);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleFileUpload = event => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      if (file.type !== 'text/csv') {\n        setError('Please upload a CSV file');\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          var _e$target2;\n          const text = (_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : _e$target2.result;\n          const lines = text.split('\\n').filter(line => line.trim());\n          const parsedData = lines.slice(1).map(line => {\n            const [keyword, url] = line.split(',').map(item => item.trim());\n            return {\n              keyword,\n              url\n            };\n          });\n\n          // Update keywords and URLs separately\n          const keywordList = parsedData.map(item => item.keyword).filter(Boolean);\n          const urlList = parsedData.map(item => item.url).filter(Boolean);\n          setKeywords(keywordList.join('\\n'));\n          setUrls(urlList.join('\\n')); // Changed to join with newlines instead of setting array\n          setUploadedData(file);\n        } catch (err) {\n          setError('Error parsing CSV file. Please ensure it contains keywords and URLs in separate columns.');\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  const handleAnalyze = async () => {\n    if (!apiKey || apiKey.trim().length < 10) {\n      setError('Please enter a valid SERP API key');\n      return;\n    }\n\n    // Save API key to localStorage\n    localStorage.setItem('serpApiKey', apiKey);\n    if (!locations.trim()) {\n      setError('Please enter at least one location');\n      return;\n    }\n    if (!keywords.trim()) {\n      setError('Please enter at least one keyword or upload a CSV file');\n      return;\n    }\n    setLoading(true);\n    setError('');\n    try {\n      // Test API connection first with a more descriptive test query\n      const testParams = {\n        api_key: apiKey,\n        q: 'serpapi test query',\n        location: 'United States',\n        google_domain: 'google.com',\n        gl: 'us',\n        hl: 'en',\n        num: 1,\n        safe: 'active'\n      };\n\n      // Use our proxy server instead of direct API call\n      await axios.get('http://localhost:3001/api/serp', {\n        params: testParams\n      });\n      const keywordList = keywords.split('\\n').map(k => k.trim()).filter(k => k.length > 0);\n      const locationList = locations.split('\\n').map(loc => loc.trim()).filter(loc => loc.length > 0);\n      if (keywordList.length === 0) {\n        throw new Error('No valid keywords found');\n      }\n      const searchResults = [];\n      const maxRequestsPerMinute = 60;\n      let requestCount = 0;\n      for (const keyword of keywordList) {\n        const keywordResult = {\n          keyword,\n          locations: locationList,\n          results: new Map()\n        };\n        for (const location of locationList) {\n          // Implement rate limiting\n          if (requestCount >= maxRequestsPerMinute) {\n            await new Promise(resolve => setTimeout(resolve, 60000));\n            requestCount = 0;\n          }\n          const params = {\n            api_key: apiKey,\n            q: keyword,\n            location: location,\n            google_domain: 'google.com',\n            gl: 'us',\n            hl: 'en',\n            num: 10,\n            safe: 'active'\n          };\n          try {\n            // Use our proxy server instead of direct API call\n            const response = await axios.get('http://localhost:3001/api/serp', {\n              params\n            });\n            const organicResults = response.data.organic_results || [];\n            keywordResult.results.set(location, organicResults.map((result, index) => {\n              const url = result.link || '';\n              const screenshotInfo = urlScreenshots.get(url);\n              return {\n                position: index + 1,\n                url,\n                screenshot: result.thumbnail || null,\n                customScreenshot: screenshotInfo ? screenshotInfo.file : undefined,\n                screenshotDate: screenshotInfo ? screenshotInfo.date : undefined\n              };\n            }));\n            requestCount++;\n          } catch (locationErr) {\n            console.error(`Error fetching results for ${keyword} in ${location}:`, locationErr);\n            keywordResult.results.set(location, []);\n          }\n        }\n        searchResults.push(keywordResult);\n      }\n      if (searchResults.length === 0) {\n        throw new Error('No search results found');\n      }\n      setResults(searchResults);\n    } catch (err) {\n      if (axios.isAxiosError(err)) {\n        var _err$response, _err$response2;\n        if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n          setError('Invalid API key. Please check your SERP API key and try again.');\n        } else if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 429) {\n          setError('API rate limit exceeded. Please wait a moment and try again.');\n        } else if (!err.response) {\n          setError('Network error. Please check your internet connection and ensure the proxy server is running.');\n        } else {\n          var _err$response$data;\n          setError(`API Error: ${((_err$response$data = err.response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || err.message || 'Unknown error occurred'}`);\n        }\n      } else {\n        setError(err.message || 'Error fetching search results. Please try again.');\n      }\n      console.error('SERP API Error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleExport = async () => {\n    // Get the list of user-entered URLs\n    const userUrls = urls.split('\\n').map(url => url.trim()).filter(url => url.length > 0);\n    const doc = new Document({\n      sections: [{\n        properties: {},\n        children: [new Paragraph({\n          children: [new TextRun({\n            text: \"SERP Analysis Report\"\n          })],\n          heading: HeadingLevel.TITLE,\n          alignment: \"center\",\n          spacing: {\n            after: 200\n          }\n        })]\n      }, ...results.flatMap(keywordResult => ({\n        properties: {},\n        children: [new Paragraph({\n          children: [new TextRun({\n            text: keywordResult.keyword,\n            size: 32,\n            bold: true\n          })],\n          spacing: {\n            after: 200\n          },\n          heading: HeadingLevel.HEADING_1,\n          alignment: \"center\"\n        }), ...keywordResult.locations.flatMap(location => [new Paragraph({\n          children: [new TextRun({\n            text: `Location: ${location}`,\n            bold: true,\n            size: 28\n          })],\n          spacing: {\n            after: 200\n          },\n          heading: HeadingLevel.HEADING_2\n        }), ...Array.from(keywordResult.results.get(location) || [])\n        // Include all user-entered URLs, regardless of screenshot availability\n        .filter(result => userUrls.includes(result.url)).flatMap(result => [new Paragraph({\n          children: [new TextRun({\n            text: `Position: ${result.position}`,\n            size: 24,\n            bold: true\n          })],\n          spacing: {\n            after: 100\n          }\n        }), new Paragraph({\n          children: [new TextRun({\n            text: `Link: `,\n            size: 24,\n            bold: true\n          }), new ExternalHyperlink({\n            children: [new TextRun({\n              text: result.url,\n              style: \"Hyperlink\"\n            })],\n            link: result.url\n          })],\n          spacing: {\n            after: 100\n          }\n        }),\n        // Screenshot centered - add if customScreenshot exists, otherwise use search result screenshot\n        new Paragraph({\n          children: [new ImageRun({\n            type: \"jpg\",\n            data: result.customScreenshot ? Uint8Array.from(atob(result.customScreenshot.split(',')[1]), c => c.charCodeAt(0)) : result.screenshot ? Uint8Array.from(atob(result.screenshot.split(',')[1]), c => c.charCodeAt(0)) : new Uint8Array(0),\n            transformation: {\n              width: 381,\n              height: 118\n            }\n          })],\n          alignment: \"center\",\n          spacing: {\n            after: 100\n          }\n        }), new Paragraph({\n          children: [new TextRun({\n            text: result.screenshotDate ? `Screenshot taken on ${result.screenshotDate}` : \"Screenshot from search results\"\n          })],\n          alignment: \"center\",\n          spacing: {\n            after: 200\n          }\n        })])])]\n      }))]\n    });\n    const blob = await Packer.toBlob(doc);\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'serp-analysis.docx';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      p: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              gutterBottom: true,\n              children: \"SERP Analysis Configuration\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"SERP API Key\",\n              value: apiKey,\n              onChange: e => setApiKey(e.target.value),\n              margin: \"normal\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Keywords (one per line)\",\n              value: keywords,\n              onChange: e => setKeywords(e.target.value),\n              margin: \"normal\",\n              multiline: true,\n              rows: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"URLs to track (one per line)\",\n              value: urls,\n              onChange: e => setUrls(e.target.value),\n              margin: \"normal\",\n              multiline: true,\n              rows: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              label: \"Locations (one per line)\",\n              value: locations,\n              onChange: e => setLocations(e.target.value),\n              margin: \"normal\",\n              multiline: true,\n              rows: 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"file\",\n                accept: \".csv\",\n                onChange: handleFileUpload,\n                style: {\n                  display: 'none'\n                },\n                id: \"csv-upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"csv-upload\",\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  component: \"span\",\n                  sx: {\n                    mr: 2\n                  },\n                  children: \"Upload CSV\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: handleAnalyze,\n                disabled: loading,\n                sx: {\n                  mr: 2\n                },\n                children: \"Analyze\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 17\n              }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: handleExport,\n                disabled: loading,\n                color: \"secondary\",\n                children: \"Export to Word\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 413,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                width: '100%',\n                mt: 2\n              },\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                gutterBottom: true,\n                children: \"Analyzing... Please wait\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n              color: \"error\",\n              sx: {\n                mt: 2\n              },\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            children: /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                gutterBottom: true,\n                children: \"URLs and Screenshots\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 443,\n                columnNumber: 17\n              }, this), urls.split('\\n').map(url => url.trim()).filter(url => url.length > 0).map((url, index) => {\n                var _urlScreenshots$get;\n                return /*#__PURE__*/_jsxDEV(Box, {\n                  sx: {\n                    mb: 2,\n                    display: 'flex',\n                    alignItems: 'center',\n                    gap: 2\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(Typography, {\n                    sx: {\n                      flex: 1\n                    },\n                    children: url\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 449,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"file\",\n                    accept: \"image/*\",\n                    onChange: handleScreenshotUpload(url),\n                    style: {\n                      display: 'none'\n                    },\n                    id: `screenshot-upload-${index}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 450,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    htmlFor: `screenshot-upload-${index}`,\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      variant: \"outlined\",\n                      component: \"span\",\n                      size: \"small\",\n                      children: urlScreenshots.has(url) ? 'Update Screenshot' : 'Add Screenshot'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 458,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 23\n                  }, this), urlScreenshots.has(url) && /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"caption\",\n                    color: \"textSecondary\",\n                    children: [\"Added: \", (_urlScreenshots$get = urlScreenshots.get(url)) === null || _urlScreenshots$get === void 0 ? void 0 : _urlScreenshots$get.date]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 467,\n                    columnNumber: 25\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 21\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 348,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"Ytxj5+EWxxYG4CJ+2Qasrn6tooc=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["useState","Box","Button","Card","CardContent","Grid","TextField","Typography","LinearProgress","Document","Packer","Paragraph","TextRun","ImageRun","HeadingLevel","ExternalHyperlink","axios","React","jsxDEV","_jsxDEV","Dashboard","_s","keywords","setKeywords","urls","setUrls","locations","setLocations","uploadedData","setUploadedData","results","setResults","apiKey","setApiKey","localStorage","getItem","error","setError","loading","setLoading","urlScreenshots","setUrlScreenshots","Map","handleScreenshotUpload","url","event","target","files","file","reader","FileReader","onload","e","_e$target","newScreenshots","today","Date","formattedDate","getMonth","getDate","getFullYear","toString","substr","set","result","date","readAsDataURL","handleFileUpload","type","_e$target2","text","lines","split","filter","line","trim","parsedData","slice","map","keyword","item","keywordList","Boolean","urlList","join","err","readAsText","handleAnalyze","length","setItem","testParams","api_key","q","location","google_domain","gl","hl","num","safe","get","params","k","locationList","loc","Error","searchResults","maxRequestsPerMinute","requestCount","keywordResult","Promise","resolve","setTimeout","response","organicResults","data","organic_results","index","link","screenshotInfo","position","screenshot","thumbnail","customScreenshot","undefined","screenshotDate","locationErr","console","push","isAxiosError","_err$response","_err$response2","status","_err$response$data","message","handleExport","userUrls","doc","sections","properties","children","heading","TITLE","alignment","spacing","after","flatMap","size","bold","HEADING_1","HEADING_2","Array","from","includes","style","Uint8Array","atob","c","charCodeAt","transformation","width","height","blob","toBlob","window","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","sx","p","container","xs","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","fullWidth","label","value","onChange","margin","multiline","rows","mt","accept","display","id","htmlFor","component","mr","onClick","disabled","color","_urlScreenshots$get","mb","alignItems","gap","flex","has","_c","$RefreshReg$"],"sources":["/Users/hp/Documents/GitHub/SERP/src/pages/Dashboard.tsx"],"sourcesContent":["import { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  Typography,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  LinearProgress,\n} from '@mui/material';\nimport { Document, Packer, Paragraph, TextRun, ImageRun, HeadingLevel, ExternalHyperlink } from 'docx';\nimport axios from 'axios';\nimport React from 'react';\n\ninterface SearchResult {\n  position: number;\n  url: string;\n  screenshot?: string;\n  customScreenshot?: string;\n  screenshotDate?: string;\n}\n\ninterface KeywordResult {\n  keyword: string;\n  locations: string[];\n  results: Map<string, SearchResult[]>;\n}\n\nconst Dashboard: React.FC = () => {\n  const [keywords, setKeywords] = useState<string>('');\n  const [urls, setUrls] = useState<string>('');  // Changed from string[] to string\n  const [locations, setLocations] = useState<string>('');  // Changed from string[] to string\n  const [uploadedData, setUploadedData] = useState<File | null>(null);\n  const [results, setResults] = useState<KeywordResult[]>([]);\n  const [apiKey, setApiKey] = useState<string>(() => localStorage.getItem('serpApiKey') || '');\n  const [error, setError] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [urlScreenshots, setUrlScreenshots] = useState<Map<string, { file: string, date: string }>>(\n    new Map()\n  );\n\n  const handleScreenshotUpload = (url: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const newScreenshots = new Map(urlScreenshots);\n        const today = new Date();\n        const formattedDate = `${today.getMonth() + 1}/${today.getDate()}/${today.getFullYear().toString().substr(-2)}`;\n        newScreenshots.set(url, { file: e.target?.result as string, date: formattedDate });\n        setUrlScreenshots(newScreenshots);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      if (file.type !== 'text/csv') {\n        setError('Please upload a CSV file');\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const text = e.target?.result as string;\n          const lines = text.split('\\n').filter(line => line.trim());\n          const parsedData = lines.slice(1).map(line => {\n            const [keyword, url] = line.split(',').map(item => item.trim());\n            return { keyword, url };\n          });\n          \n          // Update keywords and URLs separately\n          const keywordList = parsedData.map(item => item.keyword).filter(Boolean);\n          const urlList = parsedData.map(item => item.url).filter(Boolean);\n          \n          setKeywords(keywordList.join('\\n'));\n          setUrls(urlList.join('\\n')); // Changed to join with newlines instead of setting array\n          setUploadedData(file);\n        } catch (err) {\n          setError('Error parsing CSV file. Please ensure it contains keywords and URLs in separate columns.');\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const handleAnalyze = async () => {\n    if (!apiKey || apiKey.trim().length < 10) {\n      setError('Please enter a valid SERP API key');\n      return;\n    }\n  \n    // Save API key to localStorage\n    localStorage.setItem('serpApiKey', apiKey);\n  \n    if (!locations.trim()) {\n      setError('Please enter at least one location');\n      return;\n    }\n  \n    if (!keywords.trim()) {\n      setError('Please enter at least one keyword or upload a CSV file');\n      return;\n    }\n  \n    setLoading(true);\n    setError('');\n  \n    try {\n      // Test API connection first with a more descriptive test query\n      const testParams = {\n        api_key: apiKey,\n        q: 'serpapi test query',\n        location: 'United States',\n        google_domain: 'google.com',\n        gl: 'us',\n        hl: 'en',\n        num: 1,\n        safe: 'active'\n      };\n  \n      // Use our proxy server instead of direct API call\n      await axios.get('http://localhost:3001/api/serp', { params: testParams });\n  \n      const keywordList = keywords.split('\\n')\n        .map(k => k.trim())\n        .filter(k => k.length > 0);\n      \n      const locationList = locations.split('\\n')\n        .map(loc => loc.trim())\n        .filter(loc => loc.length > 0);\n  \n      if (keywordList.length === 0) {\n        throw new Error('No valid keywords found');\n      }\n  \n      const searchResults: KeywordResult[] = [];\n      const maxRequestsPerMinute = 60;\n      let requestCount = 0;\n  \n      for (const keyword of keywordList) {\n        const keywordResult: KeywordResult = {\n          keyword,\n          locations: locationList,\n          results: new Map()\n        };\n  \n        for (const location of locationList) {\n          // Implement rate limiting\n          if (requestCount >= maxRequestsPerMinute) {\n            await new Promise(resolve => setTimeout(resolve, 60000));\n            requestCount = 0;\n          }\n  \n          const params = {\n            api_key: apiKey,\n            q: keyword,\n            location: location,\n            google_domain: 'google.com',\n            gl: 'us',\n            hl: 'en',\n            num: 10,\n            safe: 'active'\n          };\n  \n          try {\n            // Use our proxy server instead of direct API call\n            const response = await axios.get('http://localhost:3001/api/serp', { params });\n            const organicResults = response.data.organic_results || [];\n  \n            keywordResult.results.set(\n              location,\n              organicResults.map((result: any, index: number) => {\n                const url = result.link || '';\n                const screenshotInfo = urlScreenshots.get(url);\n                return {\n                  position: index + 1,\n                  url,\n                  screenshot: result.thumbnail || null,\n                  customScreenshot: screenshotInfo ? screenshotInfo.file : undefined,\n                  screenshotDate: screenshotInfo ? screenshotInfo.date : undefined\n                };\n              })\n            );\n  \n            requestCount++;\n          } catch (locationErr: any) {\n            console.error(`Error fetching results for ${keyword} in ${location}:`, locationErr);\n            keywordResult.results.set(location, []);\n          }\n        }\n  \n        searchResults.push(keywordResult);\n      }\n  \n      if (searchResults.length === 0) {\n        throw new Error('No search results found');\n      }\n  \n      setResults(searchResults);\n    } catch (err: any) {\n      if (axios.isAxiosError(err)) {\n        if (err.response?.status === 401) {\n          setError('Invalid API key. Please check your SERP API key and try again.');\n        } else if (err.response?.status === 429) {\n          setError('API rate limit exceeded. Please wait a moment and try again.');\n        } else if (!err.response) {\n          setError('Network error. Please check your internet connection and ensure the proxy server is running.');\n        } else {\n          setError(`API Error: ${err.response.data?.error || err.message || 'Unknown error occurred'}`);\n        }\n      } else {\n        setError(err.message || 'Error fetching search results. Please try again.');\n      }\n      console.error('SERP API Error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExport = async () => {\n    // Get the list of user-entered URLs\n    const userUrls = urls.split('\\n')\n      .map(url => url.trim())\n      .filter(url => url.length > 0);\n\n    const doc = new Document({\n      sections: [\n        {\n          properties: {},\n          children: [\n            new Paragraph({\n              children: [new TextRun({ text: \"SERP Analysis Report\" })],\n              heading: HeadingLevel.TITLE,\n              alignment: \"center\",\n              spacing: { after: 200 }\n            })\n          ]\n        },\n        ...results.flatMap((keywordResult) => ({\n          properties: {},\n          children: [\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: keywordResult.keyword,\n                  size: 32,\n                  bold: true\n                })\n              ],\n              spacing: {\n                after: 200\n              },\n              heading: HeadingLevel.HEADING_1,\n              alignment: \"center\"\n            }),\n            ...keywordResult.locations.flatMap(location => [\n              new Paragraph({\n                children: [new TextRun({ text: `Location: ${location}`, bold: true, size: 28 })],\n                spacing: {\n                  after: 200\n                },\n                heading: HeadingLevel.HEADING_2\n              }),\n              ...Array.from(keywordResult.results.get(location) || [])\n                // Include all user-entered URLs, regardless of screenshot availability\n                .filter(result => userUrls.includes(result.url))\n                .flatMap(result => [\n                  new Paragraph({\n                    children: [\n                      new TextRun({ text: `Position: ${result.position}`, size: 24, bold: true })\n                    ],\n                    spacing: {\n                      after: 100\n                    }\n                  }),\n                  new Paragraph({\n                    children: [\n                      new TextRun({ text: `Link: `, size: 24, bold: true }),\n                      new ExternalHyperlink({\n                        children: [\n                          new TextRun({\n                            text: result.url,\n                            style: \"Hyperlink\"\n                          })\n                        ],\n                        link: result.url\n                      })\n                    ],\n                    spacing: {\n                      after: 100\n                    }\n                  }),\n                  // Screenshot centered - add if customScreenshot exists, otherwise use search result screenshot\n                  new Paragraph({\n                    children: [\n                      new ImageRun({\n                        type: \"jpg\",\n                        data: result.customScreenshot\n                          ? Uint8Array.from(atob(result.customScreenshot.split(',')[1]), c => c.charCodeAt(0))\n                          : result.screenshot\n                            ? Uint8Array.from(atob(result.screenshot.split(',')[1]), c => c.charCodeAt(0))\n                            : new Uint8Array(0),\n                        transformation: {\n                          width: 381,\n                          height: 118\n                        }\n                      })\n                    ],\n                    alignment: \"center\",\n                    spacing: { after: 100 }\n                  }),\n                  new Paragraph({\n                    children: [\n                      new TextRun({ \n                        text: result.screenshotDate \n                          ? `Screenshot taken on ${result.screenshotDate}` \n                          : \"Screenshot from search results\"\n                      })\n                    ],\n                    alignment: \"center\",\n                    spacing: { after: 200 }\n                  })\n                ])\n            ])\n          ]\n        }))\n      ]\n    });\n    \n    const blob = await Packer.toBlob(doc);\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'serp-analysis.docx';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                SERP Analysis Configuration\n              </Typography>\n              <TextField\n                fullWidth\n                label=\"SERP API Key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                margin=\"normal\"\n                type=\"password\"\n              />\n              <TextField\n                fullWidth\n                label=\"Keywords (one per line)\"\n                value={keywords}\n                onChange={(e) => setKeywords(e.target.value)}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <TextField\n                fullWidth\n                label=\"URLs to track (one per line)\"\n                value={urls}\n                onChange={(e) => setUrls(e.target.value)}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <TextField\n                fullWidth\n                label=\"Locations (one per line)\"\n                value={locations}\n                onChange={(e) => setLocations(e.target.value)}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <Box sx={{ mt: 2 }}>\n                <input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  style={{ display: 'none' }}\n                  id=\"csv-upload\"\n                />\n                <label htmlFor=\"csv-upload\">\n                  <Button variant=\"contained\" component=\"span\" sx={{ mr: 2 }}>\n                    Upload CSV\n                  </Button>\n                </label>\n                <Button\n                  variant=\"contained\"\n                  onClick={handleAnalyze}\n                  disabled={loading}\n                  sx={{ mr: 2 }}\n                >\n                  Analyze\n                </Button>\n                {results.length > 0 && (\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleExport}\n                    disabled={loading}\n                    color=\"secondary\"\n                  >\n                    Export to Word\n                  </Button>\n                )}\n              </Box>\n              {loading && (\n                <Box sx={{ width: '100%', mt: 2 }}>\n                  <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                    Analyzing... Please wait\n                  </Typography>\n                  <LinearProgress />\n                </Box>\n              )}\n              {error && (\n                <Typography color=\"error\" sx={{ mt: 2 }}>\n                  {error}\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>URLs and Screenshots</Typography>\n                {urls.split('\\n')\n                  .map(url => url.trim())\n                  .filter(url => url.length > 0)\n                  .map((url, index) => (\n                    <Box key={index} sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>\n                      <Typography sx={{ flex: 1 }}>{url}</Typography>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleScreenshotUpload(url)}\n                        style={{ display: 'none' }}\n                        id={`screenshot-upload-${index}`}\n                      />\n                      <label htmlFor={`screenshot-upload-${index}`}>\n                        <Button\n                          variant=\"outlined\"\n                          component=\"span\"\n                          size=\"small\"\n                        >\n                          {urlScreenshots.has(url) ? 'Update Screenshot' : 'Add Screenshot'}\n                        </Button>\n                      </label>\n                      {urlScreenshots.has(url) && (\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          Added: {urlScreenshots.get(url)?.date}\n                        </Typography>\n                      )}\n                    </Box>\n                  ))}\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}