{"ast":null,"code":"import{useState}from'react';import{Box,Button,Card,CardContent,Grid,TextField,Typography,LinearProgress}from'@mui/material';import{Document,Packer,Paragraph,TextRun,ImageRun,HeadingLevel,ExternalHyperlink}from'docx';import axios from'axios';import React from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{const[keywords,setKeywords]=useState('');const[urls,setUrls]=useState('');// Changed from string[] to string\nconst[locations,setLocations]=useState('');// Changed from string[] to string\nconst[uploadedData,setUploadedData]=useState(null);const[results,setResults]=useState([]);const[apiKey,setApiKey]=useState(()=>localStorage.getItem('serpApiKey')||'');const[error,setError]=useState('');const[loading,setLoading]=useState(false);const[urlScreenshots,setUrlScreenshots]=useState(new Map());const handleScreenshotUpload=url=>event=>{if(event.target.files&&event.target.files[0]){const file=event.target.files[0];const reader=new FileReader();reader.onload=e=>{var _e$target;const newScreenshots=new Map(urlScreenshots);const today=new Date();const formattedDate=`${today.getMonth()+1}/${today.getDate()}/${today.getFullYear().toString().substr(-2)}`;newScreenshots.set(url,{file:(_e$target=e.target)===null||_e$target===void 0?void 0:_e$target.result,date:formattedDate});setUrlScreenshots(newScreenshots);};reader.readAsDataURL(file);}};const handleFileUpload=event=>{if(event.target.files&&event.target.files[0]){const file=event.target.files[0];if(file.type!=='text/csv'){setError('Please upload a CSV file');return;}const reader=new FileReader();reader.onload=e=>{try{var _e$target2;const text=(_e$target2=e.target)===null||_e$target2===void 0?void 0:_e$target2.result;const lines=text.split('\\n').filter(line=>line.trim());const parsedData=lines.slice(1).map(line=>{const[keyword,url]=line.split(',').map(item=>item.trim());return{keyword,url};});// Update keywords and URLs separately\nconst keywordList=parsedData.map(item=>item.keyword).filter(Boolean);const urlList=parsedData.map(item=>item.url).filter(Boolean);setKeywords(keywordList.join('\\n'));setUrls(urlList.join('\\n'));// Changed to join with newlines instead of setting array\nsetUploadedData(file);}catch(err){setError('Error parsing CSV file. Please ensure it contains keywords and URLs in separate columns.');}};reader.readAsText(file);}};const handleAnalyze=async()=>{if(!apiKey||apiKey.trim().length<10){setError('Please enter a valid SERP API key');return;}// Save API key to localStorage\nlocalStorage.setItem('serpApiKey',apiKey);if(!locations.trim()){setError('Please enter at least one location');return;}if(!keywords.trim()){setError('Please enter at least one keyword or upload a CSV file');return;}setLoading(true);setError('');try{// Test API connection first with a more descriptive test query\nconst testParams={api_key:apiKey,q:'serpapi test query',location:'United States',google_domain:'google.com',gl:'us',hl:'en',num:1,safe:'active'};// Use our proxy server instead of direct API call\nawait axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/serp`,{params:testParams});const keywordList=keywords.split('\\n').map(k=>k.trim()).filter(k=>k.length>0);const locationList=locations.split('\\n').map(loc=>loc.trim()).filter(loc=>loc.length>0);if(keywordList.length===0){throw new Error('No valid keywords found');}const searchResults=[];const maxRequestsPerMinute=60;let requestCount=0;for(const keyword of keywordList){const keywordResult={keyword,locations:locationList,results:new Map()};for(const location of locationList){// Implement rate limiting\nif(requestCount>=maxRequestsPerMinute){await new Promise(resolve=>setTimeout(resolve,60000));requestCount=0;}const params={api_key:apiKey,q:keyword,location:location,google_domain:'google.com',gl:'us',hl:'en',num:10,safe:'active'};try{// Use our proxy server instead of direct API call\nconst response=await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/serp`,{params});const organicResults=response.data.organic_results||[];keywordResult.results.set(location,organicResults.map((result,index)=>{const url=result.link||'';const screenshotInfo=urlScreenshots.get(url);return{position:index+1,url,screenshot:result.thumbnail||null,customScreenshot:screenshotInfo?screenshotInfo.file:undefined,screenshotDate:screenshotInfo?screenshotInfo.date:undefined};}));requestCount++;}catch(locationErr){console.error(`Error fetching results for ${keyword} in ${location}:`,locationErr);keywordResult.results.set(location,[]);}}searchResults.push(keywordResult);}if(searchResults.length===0){throw new Error('No search results found');}setResults(searchResults);}catch(err){if(axios.isAxiosError(err)){var _err$response,_err$response2;if(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.status)===401){setError('Invalid API key. Please check your SERP API key and try again.');}else if(((_err$response2=err.response)===null||_err$response2===void 0?void 0:_err$response2.status)===429){setError('API rate limit exceeded. Please wait a moment and try again.');}else if(!err.response){setError('Network error. Please check your internet connection and ensure the proxy server is running.');}else{var _err$response$data;setError(`API Error: ${((_err$response$data=err.response.data)===null||_err$response$data===void 0?void 0:_err$response$data.error)||err.message||'Unknown error occurred'}`);}}else{setError(err.message||'Error fetching search results. Please try again.');}console.error('SERP API Error:',err);}finally{setLoading(false);}};const handleExport=async()=>{// Get the list of user-entered URLs\nconst userUrls=urls.split('\\n').map(url=>url.trim()).filter(url=>url.length>0);const doc=new Document({sections:[{properties:{},children:[new Paragraph({children:[new TextRun({text:\"SERP Analysis Report\"})],heading:HeadingLevel.TITLE,alignment:\"center\",spacing:{after:200}})]},...results.flatMap(keywordResult=>({properties:{},children:[new Paragraph({children:[new TextRun({text:keywordResult.keyword,size:32,bold:true})],spacing:{after:200},heading:HeadingLevel.HEADING_1,alignment:\"center\"}),...keywordResult.locations.flatMap(location=>[new Paragraph({children:[new TextRun({text:`Location: ${location}`,bold:true,size:28})],spacing:{after:200},heading:HeadingLevel.HEADING_2}),...Array.from(keywordResult.results.get(location)||[])// Include all user-entered URLs, regardless of screenshot availability\n.filter(result=>userUrls.includes(result.url)).flatMap(result=>[new Paragraph({children:[new TextRun({text:`Position: ${result.position}`,size:24,bold:true})],spacing:{after:100}}),new Paragraph({children:[new TextRun({text:`Link: `,size:24,bold:true}),new ExternalHyperlink({children:[new TextRun({text:result.url,style:\"Hyperlink\"})],link:result.url})],spacing:{after:100}}),// Screenshot centered - add if customScreenshot exists, otherwise use search result screenshot\nnew Paragraph({children:[new ImageRun({type:\"jpg\",data:result.customScreenshot?Uint8Array.from(atob(result.customScreenshot.split(',')[1]),c=>c.charCodeAt(0)):result.screenshot?Uint8Array.from(atob(result.screenshot.split(',')[1]),c=>c.charCodeAt(0)):new Uint8Array(0),transformation:{width:381,height:118}})],alignment:\"center\",spacing:{after:100}}),new Paragraph({children:[new TextRun({text:result.screenshotDate?`Screenshot taken on ${result.screenshotDate}`:\"Screenshot from search results\"})],alignment:\"center\",spacing:{after:200}})])])]}))]});const blob=await Packer.toBlob(doc);const url=window.URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download='serp-analysis.docx';a.click();window.URL.revokeObjectURL(url);};return/*#__PURE__*/_jsx(Box,{sx:{p:3},children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:3,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",gutterBottom:true,children:\"SERP Analysis Configuration\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"SERP API Key\",value:apiKey,onChange:e=>setApiKey(e.target.value),margin:\"normal\",type:\"password\"}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Keywords (one per line)\",value:keywords,onChange:e=>setKeywords(e.target.value),margin:\"normal\",multiline:true,rows:4}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"URLs to track (one per line)\",value:urls,onChange:e=>setUrls(e.target.value),margin:\"normal\",multiline:true,rows:4}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:\"Locations (one per line)\",value:locations,onChange:e=>setLocations(e.target.value),margin:\"normal\",multiline:true,rows:4}),/*#__PURE__*/_jsxs(Box,{sx:{mt:2},children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".csv\",onChange:handleFileUpload,style:{display:'none'},id:\"csv-upload\"}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"csv-upload\",children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",component:\"span\",sx:{mr:2},children:\"Upload CSV\"})}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleAnalyze,disabled:loading,sx:{mr:2},children:\"Analyze\"}),results.length>0&&/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:handleExport,disabled:loading,color:\"secondary\",children:\"Export to Word\"})]}),loading&&/*#__PURE__*/_jsxs(Box,{sx:{width:'100%',mt:2},children:[/*#__PURE__*/_jsx(Typography,{variant:\"body2\",color:\"textSecondary\",gutterBottom:true,children:\"Analyzing... Please wait\"}),/*#__PURE__*/_jsx(LinearProgress,{})]}),error&&/*#__PURE__*/_jsx(Typography,{color:\"error\",sx:{mt:2},children:error})]})})}),/*#__PURE__*/_jsx(Grid,{container:true,spacing:2,children:/*#__PURE__*/_jsx(Grid,{item:true,xs:12,children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",gutterBottom:true,children:\"URLs and Screenshots\"}),urls.split('\\n').map(url=>url.trim()).filter(url=>url.length>0).map((url,index)=>{var _urlScreenshots$get;return/*#__PURE__*/_jsxs(Box,{sx:{mb:2,display:'flex',alignItems:'center',gap:2},children:[/*#__PURE__*/_jsx(Typography,{sx:{flex:1},children:url}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\"image/*\",onChange:handleScreenshotUpload(url),style:{display:'none'},id:`screenshot-upload-${index}`}),/*#__PURE__*/_jsx(\"label\",{htmlFor:`screenshot-upload-${index}`,children:/*#__PURE__*/_jsx(Button,{variant:\"outlined\",component:\"span\",size:\"small\",children:urlScreenshots.has(url)?'Update Screenshot':'Add Screenshot'})}),urlScreenshots.has(url)&&/*#__PURE__*/_jsxs(Typography,{variant:\"caption\",color:\"textSecondary\",children:[\"Added: \",(_urlScreenshots$get=urlScreenshots.get(url))===null||_urlScreenshots$get===void 0?void 0:_urlScreenshots$get.date]})]},index);})]})})})})]})});};export default Dashboard;","map":{"version":3,"names":["useState","Box","Button","Card","CardContent","Grid","TextField","Typography","LinearProgress","Document","Packer","Paragraph","TextRun","ImageRun","HeadingLevel","ExternalHyperlink","axios","React","jsx","_jsx","jsxs","_jsxs","Dashboard","keywords","setKeywords","urls","setUrls","locations","setLocations","uploadedData","setUploadedData","results","setResults","apiKey","setApiKey","localStorage","getItem","error","setError","loading","setLoading","urlScreenshots","setUrlScreenshots","Map","handleScreenshotUpload","url","event","target","files","file","reader","FileReader","onload","e","_e$target","newScreenshots","today","Date","formattedDate","getMonth","getDate","getFullYear","toString","substr","set","result","date","readAsDataURL","handleFileUpload","type","_e$target2","text","lines","split","filter","line","trim","parsedData","slice","map","keyword","item","keywordList","Boolean","urlList","join","err","readAsText","handleAnalyze","length","setItem","testParams","api_key","q","location","google_domain","gl","hl","num","safe","get","process","env","REACT_APP_API_BASE_URL","params","k","locationList","loc","Error","searchResults","maxRequestsPerMinute","requestCount","keywordResult","Promise","resolve","setTimeout","response","organicResults","data","organic_results","index","link","screenshotInfo","position","screenshot","thumbnail","customScreenshot","undefined","screenshotDate","locationErr","console","push","isAxiosError","_err$response","_err$response2","status","_err$response$data","message","handleExport","userUrls","doc","sections","properties","children","heading","TITLE","alignment","spacing","after","flatMap","size","bold","HEADING_1","HEADING_2","Array","from","includes","style","Uint8Array","atob","c","charCodeAt","transformation","width","height","blob","toBlob","window","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","sx","p","container","xs","variant","gutterBottom","fullWidth","label","value","onChange","margin","multiline","rows","mt","accept","display","id","htmlFor","component","mr","onClick","disabled","color","_urlScreenshots$get","mb","alignItems","gap","flex","has"],"sources":["C:/Users/RISHI/Downloads/SERP backeup/SERP backup-main/src/pages/Dashboard.tsx"],"sourcesContent":["import { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  TextField,\n  Typography,\n  Paper,\n  List,\n  ListItem,\n  ListItemText,\n  LinearProgress,\n} from '@mui/material';\nimport { Document, Packer, Paragraph, TextRun, ImageRun, HeadingLevel, ExternalHyperlink } from 'docx';\nimport axios from 'axios';\nimport React from 'react';\n\ninterface SearchResult {\n  position: number;\n  url: string;\n  screenshot?: string;\n  customScreenshot?: string;\n  screenshotDate?: string;\n}\n\ninterface KeywordResult {\n  keyword: string;\n  locations: string[];\n  results: Map<string, SearchResult[]>;\n}\n\nconst Dashboard: React.FC = () => {\n  const [keywords, setKeywords] = useState<string>('');\n  const [urls, setUrls] = useState<string>('');  // Changed from string[] to string\n  const [locations, setLocations] = useState<string>('');  // Changed from string[] to string\n  const [uploadedData, setUploadedData] = useState<File | null>(null);\n  const [results, setResults] = useState<KeywordResult[]>([]);\n  const [apiKey, setApiKey] = useState<string>(() => localStorage.getItem('serpApiKey') || '');\n  const [error, setError] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [urlScreenshots, setUrlScreenshots] = useState<Map<string, { file: string, date: string }>>(\n    new Map()\n  );\n\n  const handleScreenshotUpload = (url: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const newScreenshots = new Map(urlScreenshots);\n        const today = new Date();\n        const formattedDate = `${today.getMonth() + 1}/${today.getDate()}/${today.getFullYear().toString().substr(-2)}`;\n        newScreenshots.set(url, { file: e.target?.result as string, date: formattedDate });\n        setUrlScreenshots(newScreenshots);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      if (file.type !== 'text/csv') {\n        setError('Please upload a CSV file');\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const text = e.target?.result as string;\n          const lines = text.split('\\n').filter(line => line.trim());\n          const parsedData = lines.slice(1).map(line => {\n            const [keyword, url] = line.split(',').map(item => item.trim());\n            return { keyword, url };\n          });\n          \n          // Update keywords and URLs separately\n          const keywordList = parsedData.map(item => item.keyword).filter(Boolean);\n          const urlList = parsedData.map(item => item.url).filter(Boolean);\n          \n          setKeywords(keywordList.join('\\n'));\n          setUrls(urlList.join('\\n')); // Changed to join with newlines instead of setting array\n          setUploadedData(file);\n        } catch (err) {\n          setError('Error parsing CSV file. Please ensure it contains keywords and URLs in separate columns.');\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const handleAnalyze = async () => {\n    if (!apiKey || apiKey.trim().length < 10) {\n      setError('Please enter a valid SERP API key');\n      return;\n    }\n  \n    // Save API key to localStorage\n    localStorage.setItem('serpApiKey', apiKey);\n  \n    if (!locations.trim()) {\n      setError('Please enter at least one location');\n      return;\n    }\n  \n    if (!keywords.trim()) {\n      setError('Please enter at least one keyword or upload a CSV file');\n      return;\n    }\n  \n    setLoading(true);\n    setError('');\n  \n    try {\n      // Test API connection first with a more descriptive test query\n      const testParams = {\n        api_key: apiKey,\n        q: 'serpapi test query',\n        location: 'United States',\n        google_domain: 'google.com',\n        gl: 'us',\n        hl: 'en',\n        num: 1,\n        safe: 'active'\n      };\n  \n      // Use our proxy server instead of direct API call\n      await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/serp`, { params: testParams });\n  \n      const keywordList = keywords.split('\\n')\n        .map(k => k.trim())\n        .filter(k => k.length > 0);\n      \n      const locationList = locations.split('\\n')\n        .map(loc => loc.trim())\n        .filter(loc => loc.length > 0);\n  \n      if (keywordList.length === 0) {\n        throw new Error('No valid keywords found');\n      }\n  \n      const searchResults: KeywordResult[] = [];\n      const maxRequestsPerMinute = 60;\n      let requestCount = 0;\n  \n      for (const keyword of keywordList) {\n        const keywordResult: KeywordResult = {\n          keyword,\n          locations: locationList,\n          results: new Map()\n        };\n  \n        for (const location of locationList) {\n          // Implement rate limiting\n          if (requestCount >= maxRequestsPerMinute) {\n            await new Promise(resolve => setTimeout(resolve, 60000));\n            requestCount = 0;\n          }\n  \n          const params = {\n            api_key: apiKey,\n            q: keyword,\n            location: location,\n            google_domain: 'google.com',\n            gl: 'us',\n            hl: 'en',\n            num: 10,\n            safe: 'active'\n          };\n  \n          try {\n            // Use our proxy server instead of direct API call\n            const response = await axios.get(`${process.env.REACT_APP_API_BASE_URL}/api/serp`, { params });\n            const organicResults = response.data.organic_results || [];\n  \n            keywordResult.results.set(\n              location,\n              organicResults.map((result: any, index: number) => {\n                const url = result.link || '';\n                const screenshotInfo = urlScreenshots.get(url);\n                return {\n                  position: index + 1,\n                  url,\n                  screenshot: result.thumbnail || null,\n                  customScreenshot: screenshotInfo ? screenshotInfo.file : undefined,\n                  screenshotDate: screenshotInfo ? screenshotInfo.date : undefined\n                };\n              })\n            );\n  \n            requestCount++;\n          } catch (locationErr: any) {\n            console.error(`Error fetching results for ${keyword} in ${location}:`, locationErr);\n            keywordResult.results.set(location, []);\n          }\n        }\n  \n        searchResults.push(keywordResult);\n      }\n  \n      if (searchResults.length === 0) {\n        throw new Error('No search results found');\n      }\n  \n      setResults(searchResults);\n    } catch (err: any) {\n      if (axios.isAxiosError(err)) {\n        if (err.response?.status === 401) {\n          setError('Invalid API key. Please check your SERP API key and try again.');\n        } else if (err.response?.status === 429) {\n          setError('API rate limit exceeded. Please wait a moment and try again.');\n        } else if (!err.response) {\n          setError('Network error. Please check your internet connection and ensure the proxy server is running.');\n        } else {\n          setError(`API Error: ${err.response.data?.error || err.message || 'Unknown error occurred'}`);\n        }\n      } else {\n        setError(err.message || 'Error fetching search results. Please try again.');\n      }\n      console.error('SERP API Error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleExport = async () => {\n    // Get the list of user-entered URLs\n    const userUrls = urls.split('\\n')\n      .map(url => url.trim())\n      .filter(url => url.length > 0);\n\n    const doc = new Document({\n      sections: [\n        {\n          properties: {},\n          children: [\n            new Paragraph({\n              children: [new TextRun({ text: \"SERP Analysis Report\" })],\n              heading: HeadingLevel.TITLE,\n              alignment: \"center\",\n              spacing: { after: 200 }\n            })\n          ]\n        },\n        ...results.flatMap((keywordResult) => ({\n          properties: {},\n          children: [\n            new Paragraph({\n              children: [\n                new TextRun({\n                  text: keywordResult.keyword,\n                  size: 32,\n                  bold: true\n                })\n              ],\n              spacing: {\n                after: 200\n              },\n              heading: HeadingLevel.HEADING_1,\n              alignment: \"center\"\n            }),\n            ...keywordResult.locations.flatMap(location => [\n              new Paragraph({\n                children: [new TextRun({ text: `Location: ${location}`, bold: true, size: 28 })],\n                spacing: {\n                  after: 200\n                },\n                heading: HeadingLevel.HEADING_2\n              }),\n              ...Array.from(keywordResult.results.get(location) || [])\n                // Include all user-entered URLs, regardless of screenshot availability\n                .filter(result => userUrls.includes(result.url))\n                .flatMap(result => [\n                  new Paragraph({\n                    children: [\n                      new TextRun({ text: `Position: ${result.position}`, size: 24, bold: true })\n                    ],\n                    spacing: {\n                      after: 100\n                    }\n                  }),\n                  new Paragraph({\n                    children: [\n                      new TextRun({ text: `Link: `, size: 24, bold: true }),\n                      new ExternalHyperlink({\n                        children: [\n                          new TextRun({\n                            text: result.url,\n                            style: \"Hyperlink\"\n                          })\n                        ],\n                        link: result.url\n                      })\n                    ],\n                    spacing: {\n                      after: 100\n                    }\n                  }),\n                  // Screenshot centered - add if customScreenshot exists, otherwise use search result screenshot\n                  new Paragraph({\n                    children: [\n                      new ImageRun({\n                        type: \"jpg\",\n                        data: result.customScreenshot\n                          ? Uint8Array.from(atob(result.customScreenshot.split(',')[1]), c => c.charCodeAt(0))\n                          : result.screenshot\n                            ? Uint8Array.from(atob(result.screenshot.split(',')[1]), c => c.charCodeAt(0))\n                            : new Uint8Array(0),\n                        transformation: {\n                          width: 381,\n                          height: 118\n                        }\n                      })\n                    ],\n                    alignment: \"center\",\n                    spacing: { after: 100 }\n                  }),\n                  new Paragraph({\n                    children: [\n                      new TextRun({ \n                        text: result.screenshotDate \n                          ? `Screenshot taken on ${result.screenshotDate}` \n                          : \"Screenshot from search results\"\n                      })\n                    ],\n                    alignment: \"center\",\n                    spacing: { after: 200 }\n                  })\n                ])\n            ])\n          ]\n        }))\n      ]\n    });\n    \n    const blob = await Packer.toBlob(doc);\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'serp-analysis.docx';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                SERP Analysis Configuration\n              </Typography>\n              <TextField\n                fullWidth\n                label=\"SERP API Key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                margin=\"normal\"\n                type=\"password\"\n              />\n              <TextField\n                fullWidth\n                label=\"Keywords (one per line)\"\n                value={keywords}\n                onChange={(e) => setKeywords(e.target.value)}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <TextField\n                fullWidth\n                label=\"URLs to track (one per line)\"\n                value={urls}\n                onChange={(e) => setUrls(e.target.value)}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <TextField\n                fullWidth\n                label=\"Locations (one per line)\"\n                value={locations}\n                onChange={(e) => setLocations(e.target.value)}\n                margin=\"normal\"\n                multiline\n                rows={4}\n              />\n              <Box sx={{ mt: 2 }}>\n                <input\n                  type=\"file\"\n                  accept=\".csv\"\n                  onChange={handleFileUpload}\n                  style={{ display: 'none' }}\n                  id=\"csv-upload\"\n                />\n                <label htmlFor=\"csv-upload\">\n                  <Button variant=\"contained\" component=\"span\" sx={{ mr: 2 }}>\n                    Upload CSV\n                  </Button>\n                </label>\n                <Button\n                  variant=\"contained\"\n                  onClick={handleAnalyze}\n                  disabled={loading}\n                  sx={{ mr: 2 }}\n                >\n                  Analyze\n                </Button>\n                {results.length > 0 && (\n                  <Button\n                    variant=\"contained\"\n                    onClick={handleExport}\n                    disabled={loading}\n                    color=\"secondary\"\n                  >\n                    Export to Word\n                  </Button>\n                )}\n              </Box>\n              {loading && (\n                <Box sx={{ width: '100%', mt: 2 }}>\n                  <Typography variant=\"body2\" color=\"textSecondary\" gutterBottom>\n                    Analyzing... Please wait\n                  </Typography>\n                  <LinearProgress />\n                </Box>\n              )}\n              {error && (\n                <Typography color=\"error\" sx={{ mt: 2 }}>\n                  {error}\n                </Typography>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h6\" gutterBottom>URLs and Screenshots</Typography>\n                {urls.split('\\n')\n                  .map(url => url.trim())\n                  .filter(url => url.length > 0)\n                  .map((url, index) => (\n                    <Box key={index} sx={{ mb: 2, display: 'flex', alignItems: 'center', gap: 2 }}>\n                      <Typography sx={{ flex: 1 }}>{url}</Typography>\n                      <input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleScreenshotUpload(url)}\n                        style={{ display: 'none' }}\n                        id={`screenshot-upload-${index}`}\n                      />\n                      <label htmlFor={`screenshot-upload-${index}`}>\n                        <Button\n                          variant=\"outlined\"\n                          component=\"span\"\n                          size=\"small\"\n                        >\n                          {urlScreenshots.has(url) ? 'Update Screenshot' : 'Add Screenshot'}\n                        </Button>\n                      </label>\n                      {urlScreenshots.has(url) && (\n                        <Typography variant=\"caption\" color=\"textSecondary\">\n                          Added: {urlScreenshots.get(url)?.date}\n                        </Typography>\n                      )}\n                    </Box>\n                  ))}\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}